<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.root_dir">/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures</parameter>
    <parameter key="kernel.environment">test</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.name">Fixtures</parameter>
    <parameter key="kernel.cache_dir">/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test</parameter>
    <parameter key="kernel.logs_dir">/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/logs</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="SwiftmailerBundle">Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle</parameter>
      <parameter key="NotifireBundle">Fazland\NotifireBundle\NotifireBundle</parameter>
      <parameter key="TestBundle">Fazland\NotifireBundle\Tests\Fixtures\TestBundle\TestBundle</parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">FixturesTestDebugProjectContainer</parameter>
    <parameter key="mailer_host">127.123.0.1</parameter>
    <parameter key="twilio_name">ThisIsTwilioName</parameter>
    <parameter key="twilio_account_sid">ThisIsTwilioAccountSid</parameter>
    <parameter key="twilio_auth_token">ThisIsTwilioAuthToken</parameter>
    <parameter key="twilio_from_phone">ThisIsTwilioFromPhone</parameter>
    <parameter key="fragment.renderer.hinclude.global_template"></parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">test</parameter>
    <parameter key="kernel.http_method_override">true</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.trusted_proxies" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="test.client.parameters" type="collection"/>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.options" type="collection">
      <parameter key="cookie_httponly">true</parameter>
      <parameter key="gc_probability">1</parameter>
    </parameter>
    <parameter key="session.save_path">/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test/sessions</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="router.options.generator_class">Symfony\Component\Routing\Generator\UrlGenerator</parameter>
    <parameter key="router.options.generator_base_class">Symfony\Component\Routing\Generator\UrlGenerator</parameter>
    <parameter key="router.options.generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\PhpGeneratorDumper</parameter>
    <parameter key="router.options.matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</parameter>
    <parameter key="router.options.matcher_base_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</parameter>
    <parameter key="router.options.matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper</parameter>
    <parameter key="router.options.matcher.cache_class">FixturesTestUrlMatcher</parameter>
    <parameter key="router.options.generator.cache_class">FixturesTestUrlGenerator</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/config/routing.xml</parameter>
    <parameter key="router.cache_class_prefix">FixturesTest</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test/FixturesTestDebugProjectContainer.xml</parameter>
    <parameter key="swiftmailer.class">Swift_Mailer</parameter>
    <parameter key="swiftmailer.transport.sendmail.class">Swift_Transport_SendmailTransport</parameter>
    <parameter key="swiftmailer.transport.mail.class">Swift_Transport_MailTransport</parameter>
    <parameter key="swiftmailer.transport.failover.class">Swift_Transport_FailoverTransport</parameter>
    <parameter key="swiftmailer.plugin.redirecting.class">Swift_Plugins_RedirectingPlugin</parameter>
    <parameter key="swiftmailer.plugin.impersonate.class">Swift_Plugins_ImpersonatePlugin</parameter>
    <parameter key="swiftmailer.plugin.messagelogger.class">Swift_Plugins_MessageLogger</parameter>
    <parameter key="swiftmailer.plugin.antiflood.class">Swift_Plugins_AntiFloodPlugin</parameter>
    <parameter key="swiftmailer.transport.smtp.class">Swift_Transport_EsmtpTransport</parameter>
    <parameter key="swiftmailer.plugin.blackhole.class">Swift_Plugins_BlackholePlugin</parameter>
    <parameter key="swiftmailer.spool.file.class">Swift_FileSpool</parameter>
    <parameter key="swiftmailer.spool.memory.class">Swift_MemorySpool</parameter>
    <parameter key="swiftmailer.email_sender.listener.class">Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener</parameter>
    <parameter key="swiftmailer.data_collector.class">Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.transport.name">smtp</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.delivery.enabled">true</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.transport.smtp.encryption">null</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.transport.smtp.port">25</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.transport.smtp.host">127.123.0.1</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.transport.smtp.username">null</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.transport.smtp.password">null</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.transport.smtp.auth_mode">null</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.transport.smtp.timeout">30</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.transport.smtp.source_ip">null</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.spool.enabled">false</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.plugin.impersonate">null</parameter>
    <parameter key="swiftmailer.mailer.first_mailer.single_address">null</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.transport.name">smtp</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.delivery.enabled">true</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.transport.smtp.encryption">null</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.transport.smtp.port">25</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.transport.smtp.host">localhost</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.transport.smtp.username">null</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.transport.smtp.password">null</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.transport.smtp.auth_mode">null</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.transport.smtp.timeout">30</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.transport.smtp.source_ip">null</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.spool.enabled">false</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.plugin.impersonate">null</parameter>
    <parameter key="swiftmailer.mailer.second_mailer.single_address">null</parameter>
    <parameter key="swiftmailer.spool.enabled">false</parameter>
    <parameter key="swiftmailer.delivery.enabled">true</parameter>
    <parameter key="swiftmailer.single_address">null</parameter>
    <parameter key="swiftmailer.mailers" type="collection">
      <parameter key="first_mailer">swiftmailer.mailer.first_mailer</parameter>
      <parameter key="second_mailer">swiftmailer.mailer.second_mailer</parameter>
    </parameter>
    <parameter key="swiftmailer.default_mailer">second_mailer</parameter>
    <parameter key="fazland.notifire.handler.swiftmailer.enabled">true</parameter>
    <parameter key="fazland.notifire.handler.swiftmailer.auto_configure_mailers">true</parameter>
    <parameter key="fazland.notifire.handler.twilio.enabled">true</parameter>
    <parameter key="fazland.notifire.handler.twilio.auto_configure_services">null</parameter>
    <parameter key="console.command.ids" type="collection"/>
  </parameters>
  <services>
    <service id="controller_name_converter" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="kernel"/>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener">
      <tag name="kernel.event_subscriber"/>
      <argument>UTF-8</argument>
    </service>
    <service id="streamed_response_listener" class="Symfony\Component\HttpKernel\EventListener\StreamedResponseListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="request_stack"/>
      <argument>en</argument>
      <argument type="service" id="router" on-invalid="ignore"/>
    </service>
    <service id="translator_listener" class="Symfony\Component\HttpKernel\EventListener\TranslatorListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="translator"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel">
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="debug.controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="debug.argument_resolver"/>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack"/>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate">
      <argument type="collection">
        <argument type="service" id="kernel.class_cache.cache_warmer"/>
        <argument type="service">
          <service class="Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer" public="false">
            <tag name="kernel.cache_warmer"/>
            <argument type="service" id="translator"/>
          </service>
        </argument>
        <argument type="service">
          <service class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer" public="false">
            <tag name="kernel.cache_warmer"/>
            <argument type="service" id="router"/>
          </service>
        </argument>
      </argument>
    </service>
    <service id="kernel.class_cache.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer">
      <tag name="kernel.cache_warmer"/>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="false">
            <tag name="kernel.cache_clearer"/>
            <call method="addPool">
              <argument type="service" id="cache.app"/>
            </call>
            <call method="addPool">
              <argument type="service" id="cache.system"/>
            </call>
            <call method="addPool">
              <argument type="service">
                <service class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
                  <tag name="cache.pool"/>
                  <argument>N0nYJqpSuR</argument>
                  <argument></argument>
                  <argument>OP3R5r3zOak69B2HU+YThQ</argument>
                  <argument>/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test/pools</argument>
                  <argument>null</argument>
                  <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
                </service>
              </argument>
            </call>
            <call method="addPool">
              <argument type="service">
                <service class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
                  <tag name="cache.pool"/>
                  <argument>M0I6WkO9a3</argument>
                  <argument></argument>
                  <argument>OP3R5r3zOak69B2HU+YThQ</argument>
                  <argument>/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test/pools</argument>
                  <argument>null</argument>
                  <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
                </service>
              </argument>
            </call>
          </service>
        </argument>
      </argument>
    </service>
    <service id="service_container" synthetic="true">
      <autowiring-type>Symfony\Component\DependencyInjection\ContainerInterface</autowiring-type>
      <autowiring-type>Symfony\Component\DependencyInjection\Container</autowiring-type>
    </service>
    <service id="kernel" synthetic="true"/>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator">
      <argument type="service" id="kernel"/>
      <argument>/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/Resources</argument>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpKernel\UriSigner">
      <argument>test</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker" public="false">
            <tag name="config_cache.resource_checker" priority="-990"/>
          </service>
        </argument>
      </argument>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler">
      <argument type="service" id="service_container"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
      <call method="addRendererService">
        <argument>inline</argument>
        <argument>fragment.renderer.inline</argument>
      </call>
      <call method="addRendererService">
        <argument>esi</argument>
        <argument>fragment.renderer.esi</argument>
      </call>
      <call method="addRendererService">
        <argument>ssi</argument>
        <argument>fragment.renderer.ssi</argument>
      </call>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="fragment.renderer.hinclude" class="Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer">
      <argument></argument>
      <argument type="service" id="uri_signer"/>
      <argument></argument>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="fragment.renderer.esi" class="Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer">
      <tag name="kernel.fragment_renderer" alias="esi"/>
      <argument>null</argument>
      <argument type="service" id="fragment.renderer.inline"/>
      <argument type="service" id="uri_signer"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="fragment.renderer.ssi" class="Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer">
      <tag name="kernel.fragment_renderer" alias="ssi"/>
      <argument>null</argument>
      <argument type="service" id="fragment.renderer.inline"/>
      <argument type="service" id="uri_signer"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="translator.default" class="Symfony\Bundle\FrameworkBundle\Translation\Translator">
      <argument type="service" id="service_container"/>
      <argument type="service" id="translator.selector"/>
      <argument type="collection">
        <argument key="translation.loader.php" type="collection">
          <argument>php</argument>
        </argument>
        <argument key="translation.loader.yml" type="collection">
          <argument>yml</argument>
        </argument>
        <argument key="translation.loader.xliff" type="collection">
          <argument>xlf</argument>
          <argument>xliff</argument>
        </argument>
        <argument key="translation.loader.po" type="collection">
          <argument>po</argument>
        </argument>
        <argument key="translation.loader.mo" type="collection">
          <argument>mo</argument>
        </argument>
        <argument key="translation.loader.qt" type="collection">
          <argument>ts</argument>
        </argument>
        <argument key="translation.loader.csv" type="collection">
          <argument>csv</argument>
        </argument>
        <argument key="translation.loader.res" type="collection">
          <argument>res</argument>
        </argument>
        <argument key="translation.loader.dat" type="collection">
          <argument>dat</argument>
        </argument>
        <argument key="translation.loader.ini" type="collection">
          <argument>ini</argument>
        </argument>
        <argument key="translation.loader.json" type="collection">
          <argument>json</argument>
        </argument>
      </argument>
      <argument type="collection">
        <argument key="cache_dir">/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test/translations</argument>
        <argument key="debug">true</argument>
      </argument>
      <argument type="collection"/>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
      <autowiring-type>Symfony\Component\Translation\TranslatorInterface</autowiring-type>
    </service>
    <service id="translator" class="Symfony\Component\Translation\IdentityTranslator">
      <argument type="service" id="translator.selector"/>
    </service>
    <service id="translator.selector" class="Symfony\Component\Translation\MessageSelector" public="false"/>
    <service id="translation.loader.php" class="Symfony\Component\Translation\Loader\PhpFileLoader">
      <tag name="translation.loader" alias="php"/>
    </service>
    <service id="translation.loader.yml" class="Symfony\Component\Translation\Loader\YamlFileLoader">
      <tag name="translation.loader" alias="yml"/>
    </service>
    <service id="translation.loader.xliff" class="Symfony\Component\Translation\Loader\XliffFileLoader">
      <tag name="translation.loader" alias="xlf" legacy_alias="xliff" legacy-alias="xliff"/>
    </service>
    <service id="translation.loader.po" class="Symfony\Component\Translation\Loader\PoFileLoader">
      <tag name="translation.loader" alias="po"/>
    </service>
    <service id="translation.loader.mo" class="Symfony\Component\Translation\Loader\MoFileLoader">
      <tag name="translation.loader" alias="mo"/>
    </service>
    <service id="translation.loader.qt" class="Symfony\Component\Translation\Loader\QtFileLoader">
      <tag name="translation.loader" alias="ts"/>
    </service>
    <service id="translation.loader.csv" class="Symfony\Component\Translation\Loader\CsvFileLoader">
      <tag name="translation.loader" alias="csv"/>
    </service>
    <service id="translation.loader.res" class="Symfony\Component\Translation\Loader\IcuResFileLoader">
      <tag name="translation.loader" alias="res"/>
    </service>
    <service id="translation.loader.dat" class="Symfony\Component\Translation\Loader\IcuDatFileLoader">
      <tag name="translation.loader" alias="dat"/>
    </service>
    <service id="translation.loader.ini" class="Symfony\Component\Translation\Loader\IniFileLoader">
      <tag name="translation.loader" alias="ini"/>
    </service>
    <service id="translation.loader.json" class="Symfony\Component\Translation\Loader\JsonFileLoader">
      <tag name="translation.loader" alias="json"/>
    </service>
    <service id="translation.dumper.php" class="Symfony\Component\Translation\Dumper\PhpFileDumper">
      <tag name="translation.dumper" alias="php"/>
    </service>
    <service id="translation.dumper.xliff" class="Symfony\Component\Translation\Dumper\XliffFileDumper">
      <tag name="translation.dumper" alias="xlf"/>
    </service>
    <service id="translation.dumper.po" class="Symfony\Component\Translation\Dumper\PoFileDumper">
      <tag name="translation.dumper" alias="po"/>
    </service>
    <service id="translation.dumper.mo" class="Symfony\Component\Translation\Dumper\MoFileDumper">
      <tag name="translation.dumper" alias="mo"/>
    </service>
    <service id="translation.dumper.yml" class="Symfony\Component\Translation\Dumper\YamlFileDumper">
      <tag name="translation.dumper" alias="yml"/>
    </service>
    <service id="translation.dumper.qt" class="Symfony\Component\Translation\Dumper\QtFileDumper">
      <tag name="translation.dumper" alias="ts"/>
    </service>
    <service id="translation.dumper.csv" class="Symfony\Component\Translation\Dumper\CsvFileDumper">
      <tag name="translation.dumper" alias="csv"/>
    </service>
    <service id="translation.dumper.ini" class="Symfony\Component\Translation\Dumper\IniFileDumper">
      <tag name="translation.dumper" alias="ini"/>
    </service>
    <service id="translation.dumper.json" class="Symfony\Component\Translation\Dumper\JsonFileDumper">
      <tag name="translation.dumper" alias="json"/>
    </service>
    <service id="translation.dumper.res" class="Symfony\Component\Translation\Dumper\IcuResFileDumper">
      <tag name="translation.dumper" alias="res"/>
    </service>
    <service id="translation.extractor.php" class="Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor">
      <tag name="translation.extractor" alias="php"/>
    </service>
    <service id="translation.loader" class="Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader">
      <call method="addLoader">
        <argument>php</argument>
        <argument type="service" id="translation.loader.php"/>
      </call>
      <call method="addLoader">
        <argument>yml</argument>
        <argument type="service" id="translation.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument>xlf</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>xliff</argument>
        <argument type="service" id="translation.loader.xliff"/>
      </call>
      <call method="addLoader">
        <argument>po</argument>
        <argument type="service" id="translation.loader.po"/>
      </call>
      <call method="addLoader">
        <argument>mo</argument>
        <argument type="service" id="translation.loader.mo"/>
      </call>
      <call method="addLoader">
        <argument>ts</argument>
        <argument type="service" id="translation.loader.qt"/>
      </call>
      <call method="addLoader">
        <argument>csv</argument>
        <argument type="service" id="translation.loader.csv"/>
      </call>
      <call method="addLoader">
        <argument>res</argument>
        <argument type="service" id="translation.loader.res"/>
      </call>
      <call method="addLoader">
        <argument>dat</argument>
        <argument type="service" id="translation.loader.dat"/>
      </call>
      <call method="addLoader">
        <argument>ini</argument>
        <argument type="service" id="translation.loader.ini"/>
      </call>
      <call method="addLoader">
        <argument>json</argument>
        <argument type="service" id="translation.loader.json"/>
      </call>
    </service>
    <service id="translation.extractor" class="Symfony\Component\Translation\Extractor\ChainExtractor">
      <call method="addExtractor">
        <argument>php</argument>
        <argument type="service" id="translation.extractor.php"/>
      </call>
    </service>
    <service id="translation.writer" class="Symfony\Component\Translation\Writer\TranslationWriter">
      <call method="addDumper">
        <argument>php</argument>
        <argument type="service" id="translation.dumper.php"/>
      </call>
      <call method="addDumper">
        <argument>xlf</argument>
        <argument type="service" id="translation.dumper.xliff"/>
      </call>
      <call method="addDumper">
        <argument>po</argument>
        <argument type="service" id="translation.dumper.po"/>
      </call>
      <call method="addDumper">
        <argument>mo</argument>
        <argument type="service" id="translation.dumper.mo"/>
      </call>
      <call method="addDumper">
        <argument>yml</argument>
        <argument type="service" id="translation.dumper.yml"/>
      </call>
      <call method="addDumper">
        <argument>ts</argument>
        <argument type="service" id="translation.dumper.qt"/>
      </call>
      <call method="addDumper">
        <argument>csv</argument>
        <argument type="service" id="translation.dumper.csv"/>
      </call>
      <call method="addDumper">
        <argument>ini</argument>
        <argument type="service" id="translation.dumper.ini"/>
      </call>
      <call method="addDumper">
        <argument>json</argument>
        <argument type="service" id="translation.dumper.json"/>
      </call>
      <call method="addDumper">
        <argument>res</argument>
        <argument type="service" id="translation.dumper.res"/>
      </call>
    </service>
    <service id="property_accessor" class="Symfony\Component\PropertyAccess\PropertyAccessor">
      <argument>false</argument>
      <argument>false</argument>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\FilesystemAdapter">
      <tag name="cache.pool"/>
      <argument>r+yE7InR95</argument>
      <argument></argument>
      <argument>/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test/pools</argument>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <argument>n1lmR6cqQo</argument>
      <argument></argument>
      <argument>OP3R5r3zOak69B2HU+YThQ</argument>
      <argument>/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test/pools</argument>
      <argument>null</argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="test.client" class="Symfony\Bundle\FrameworkBundle\Client" shared="false">
      <argument type="service" id="kernel"/>
      <argument type="collection"/>
      <argument type="service">
        <service class="Symfony\Component\BrowserKit\History" shared="false"/>
      </argument>
      <argument type="service">
        <service class="Symfony\Component\BrowserKit\CookieJar" shared="false"/>
      </argument>
    </service>
    <service id="test.client.history" class="Symfony\Component\BrowserKit\History" shared="false"/>
    <service id="test.client.cookiejar" class="Symfony\Component\BrowserKit\CookieJar" shared="false"/>
    <service id="test.session.listener" class="Symfony\Bundle\FrameworkBundle\EventListener\TestSessionListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="session" class="Symfony\Component\HttpFoundation\Session\Session">
      <argument type="service" id="session.storage.filesystem"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag" public="false"/>
      </argument>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Flash\FlashBag" public="false"/>
      </argument>
    </service>
    <service id="session.storage.metadata_bag" class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag" public="false">
      <argument>_sf2_meta</argument>
      <argument>0</argument>
    </service>
    <service id="session.storage.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage">
      <argument type="collection">
        <argument key="cookie_httponly">true</argument>
        <argument key="gc_probability">1</argument>
      </argument>
      <argument type="service" id="session.handler"/>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.storage.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage">
      <argument type="service" id="session.handler"/>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session_listener" class="Symfony\Bundle\FrameworkBundle\EventListener\SessionListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="session.save_listener" class="Symfony\Component\HttpKernel\EventListener\SaveSessionListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="security.csrf.token_manager" class="Symfony\Component\Security\Csrf\CsrfTokenManager">
      <argument type="service">
        <service class="Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator" public="false"/>
      </argument>
      <argument type="service">
        <service class="Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage" public="false">
          <argument type="service" id="session"/>
        </service>
      </argument>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader">
      <argument type="service" id="controller_name_converter"/>
      <argument type="service">
        <service class="Symfony\Component\Config\Loader\LoaderResolver" public="false">
          <call method="addLoader">
            <argument type="service">
              <service class="Symfony\Component\Routing\Loader\XmlFileLoader" public="false">
                <tag name="routing.loader"/>
                <argument type="service" id="file_locator"/>
              </service>
            </argument>
          </call>
          <call method="addLoader">
            <argument type="service">
              <service class="Symfony\Component\Routing\Loader\YamlFileLoader" public="false">
                <tag name="routing.loader"/>
                <argument type="service" id="file_locator"/>
              </service>
            </argument>
          </call>
          <call method="addLoader">
            <argument type="service">
              <service class="Symfony\Component\Routing\Loader\PhpFileLoader" public="false">
                <tag name="routing.loader"/>
                <argument type="service" id="file_locator"/>
              </service>
            </argument>
          </call>
          <call method="addLoader">
            <argument type="service">
              <service class="Symfony\Component\Routing\Loader\DirectoryLoader" public="false">
                <tag name="routing.loader"/>
                <argument type="service" id="file_locator"/>
              </service>
            </argument>
          </call>
          <call method="addLoader">
            <argument type="service">
              <service class="Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader" public="false">
                <tag name="routing.loader"/>
                <argument type="service" id="service_container"/>
              </service>
            </argument>
          </call>
        </service>
      </argument>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" public="false">
      <argument></argument>
      <argument>GET</argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="router"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument>null</argument>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="php"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument>28586</argument>
      <argument>null</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="debug.stopwatch" class="Symfony\Component\Stopwatch\Stopwatch"/>
    <service id="debug.event_dispatcher" class="Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher">
      <tag name="monolog.logger" channel="event"/>
      <argument type="service">
        <service class="Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher" public="false">
          <argument type="service" id="service_container"/>
        </service>
      </argument>
      <argument type="service" id="debug.stopwatch"/>
      <argument>null</argument>
      <call method="addSubscriberService">
        <argument>response_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\ResponseListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>streamed_response_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\StreamedResponseListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>locale_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\LocaleListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>translator_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\TranslatorListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>test.session.listener</argument>
        <argument>Symfony\Bundle\FrameworkBundle\EventListener\TestSessionListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>session_listener</argument>
        <argument>Symfony\Bundle\FrameworkBundle\EventListener\SessionListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>session.save_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\SaveSessionListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>router_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\RouterListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>debug.debug_handlers_listener</argument>
        <argument>Symfony\Component\HttpKernel\EventListener\DebugHandlersListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>swiftmailer.email_sender.listener</argument>
        <argument>Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener</argument>
      </call>
      <call method="addSubscriberService">
        <argument>fazland.notifire.handler.swiftmailer.first_mailer</argument>
        <argument>Fazland\Notifire\EventSubscriber\Email\SwiftMailerHandler</argument>
      </call>
      <call method="addSubscriberService">
        <argument>fazland.notifire.handler.swiftmailer.second_mailer</argument>
        <argument>Fazland\Notifire\EventSubscriber\Email\SwiftMailerHandler</argument>
      </call>
    </service>
    <service id="debug.controller_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableControllerResolver">
      <argument type="service">
        <service class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver" public="false">
          <tag name="monolog.logger" channel="request"/>
          <argument type="service" id="service_container"/>
          <argument type="service" id="controller_name_converter"/>
          <argument>null</argument>
        </service>
      </argument>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="debug.argument_resolver"/>
    </service>
    <service id="debug.argument_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver">
      <argument type="service">
        <service class="Symfony\Component\HttpKernel\Controller\ArgumentResolver" public="false">
          <argument type="service">
            <service class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory" public="false"/>
          </argument>
          <argument type="collection">
            <argument type="service">
              <service class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver" public="false">
                <tag name="controller.argument_value_resolver" priority="100"/>
              </service>
            </argument>
            <argument type="service">
              <service class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver" public="false">
                <tag name="controller.argument_value_resolver" priority="50"/>
              </service>
            </argument>
            <argument type="service">
              <service class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver" public="false">
                <tag name="controller.argument_value_resolver" priority="-100"/>
              </service>
            </argument>
            <argument type="service">
              <service class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver" public="false">
                <tag name="controller.argument_value_resolver" priority="-150"/>
              </service>
            </argument>
          </argument>
        </service>
      </argument>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="d280b3c5ae5f7b472927f40d52a8bc8c1f4d64b6c195977b776b0d0b6570a951_3" class="Swift_Transport_Esmtp_Auth_PlainAuthenticator" public="false"/>
    <service id="d280b3c5ae5f7b472927f40d52a8bc8c1f4d64b6c195977b776b0d0b6570a951_2" class="Swift_Transport_Esmtp_Auth_LoginAuthenticator" public="false"/>
    <service id="d280b3c5ae5f7b472927f40d52a8bc8c1f4d64b6c195977b776b0d0b6570a951_1" class="Swift_Transport_Esmtp_Auth_CramMd5Authenticator" public="false"/>
    <service id="swiftmailer.transport.replacementfactory" class="Swift_StreamFilters_StringReplacementFilterFactory" public="false"/>
    <service id="swiftmailer.email_sender.listener" class="Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="service_container"/>
      <argument>null</argument>
    </service>
    <service id="swiftmailer.mailer.first_mailer" class="Swift_Mailer">
      <argument type="service" id="swiftmailer.mailer.first_mailer.transport"/>
    </service>
    <service id="swiftmailer.mailer.first_mailer.plugin.messagelogger" class="Swift_Plugins_MessageLogger">
      <tag name="swiftmailer.first_mailer.plugin"/>
    </service>
    <service id="swiftmailer.mailer.second_mailer" class="Swift_Mailer">
      <argument type="service" id="swiftmailer.mailer.second_mailer.transport"/>
    </service>
    <service id="swiftmailer.mailer.second_mailer.plugin.messagelogger" class="Swift_Plugins_MessageLogger">
      <tag name="swiftmailer.second_mailer.plugin"/>
    </service>
    <service id="fazland.notifire.builder" class="Fazland\Notifire\NotifireBuilder">
      <call method="setDispatcher">
        <argument type="service" id="debug.event_dispatcher"/>
      </call>
      <call method="addNotification">
        <argument>email</argument>
        <argument>Fazland\Notifire\Notification\Email</argument>
      </call>
      <call method="addNotification">
        <argument>sms</argument>
        <argument>Fazland\Notifire\Notification\Sms</argument>
      </call>
    </service>
    <service id="fazland.notifire.handler.swiftmailer.first_mailer" class="Fazland\Notifire\EventSubscriber\Email\SwiftMailerHandler">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="swiftmailer.mailer.first_mailer"/>
      <argument>first_mailer</argument>
    </service>
    <service id="fazland.notifire.handler.swiftmailer.second_mailer" class="Fazland\Notifire\EventSubscriber\Email\SwiftMailerHandler">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="swiftmailer.mailer.second_mailer"/>
      <argument>second_mailer</argument>
    </service>
    <service id="session.storage.filesystem" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage">
      <argument>/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service" id="session.storage.metadata_bag"/>
    </service>
    <service id="session.handler" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler">
      <argument>/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test/sessions</argument>
    </service>
    <service id="cache.default_redis_provider" class="Redis">
      <argument>redis://localhost</argument>
      <factory class="Symfony\Component\Cache\Adapter\RedisAdapter" method="createConnection"/>
    </service>
    <service id="router" class="Symfony\Bundle\FrameworkBundle\Routing\Router">
      <tag name="monolog.logger" channel="router"/>
      <argument type="service" id="service_container"/>
      <argument>/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/config/routing.xml</argument>
      <argument type="collection">
        <argument key="cache_dir">/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\UrlGenerator</argument>
        <argument key="generator_base_class">Symfony\Component\Routing\Generator\UrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\PhpGeneratorDumper</argument>
        <argument key="generator_cache_class">FixturesTestUrlGenerator</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</argument>
        <argument key="matcher_base_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper</argument>
        <argument key="matcher_cache_class">FixturesTestUrlMatcher</argument>
        <argument key="strict_requirements">true</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument>null</argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
    </service>
    <service id="annotation_reader" class="Doctrine\Common\Annotations\CachedReader">
      <argument type="service">
        <service class="Doctrine\Common\Annotations\AnnotationReader" public="false">
          <autowiring-type>Doctrine\Common\Annotations\Reader</autowiring-type>
        </service>
      </argument>
      <argument type="service">
        <service class="Doctrine\Common\Cache\FilesystemCache" public="false">
          <argument>/Users/massimilianobraglia/projects/notifire-bundle/src/Tests/Fixtures/cache/test/annotations</argument>
        </service>
      </argument>
      <argument>true</argument>
      <autowiring-type>Doctrine\Common\Annotations\Reader</autowiring-type>
    </service>
    <service id="swiftmailer.mailer.first_mailer.transport" class="Swift_Transport_EsmtpTransport">
      <argument type="service">
        <service class="Swift_Transport_StreamBuffer" public="false">
          <argument type="service" id="swiftmailer.transport.replacementfactory"/>
        </service>
      </argument>
      <argument type="collection">
        <argument type="service">
          <service class="Swift_Transport_Esmtp_AuthHandler" public="false">
            <argument type="collection">
              <argument type="service" id="d280b3c5ae5f7b472927f40d52a8bc8c1f4d64b6c195977b776b0d0b6570a951_1"/>
              <argument type="service" id="d280b3c5ae5f7b472927f40d52a8bc8c1f4d64b6c195977b776b0d0b6570a951_2"/>
              <argument type="service" id="d280b3c5ae5f7b472927f40d52a8bc8c1f4d64b6c195977b776b0d0b6570a951_3"/>
            </argument>
            <call method="setUsername">
              <argument>null</argument>
            </call>
            <call method="setPassword">
              <argument>null</argument>
            </call>
            <call method="setAuthMode">
              <argument>null</argument>
            </call>
          </service>
        </argument>
      </argument>
      <argument type="service">
        <service class="Swift_Events_SimpleEventDispatcher" public="false"/>
      </argument>
      <call method="setHost">
        <argument>127.123.0.1</argument>
      </call>
      <call method="setPort">
        <argument>25</argument>
      </call>
      <call method="setEncryption">
        <argument>null</argument>
      </call>
      <call method="setTimeout">
        <argument>30</argument>
      </call>
      <call method="setSourceIp">
        <argument>null</argument>
      </call>
      <call method="registerPlugin">
        <argument type="service" id="swiftmailer.mailer.first_mailer.plugin.messagelogger"/>
      </call>
    </service>
    <service id="swiftmailer.mailer.second_mailer.transport" class="Swift_Transport_EsmtpTransport">
      <argument type="service">
        <service class="Swift_Transport_StreamBuffer" public="false">
          <argument type="service" id="swiftmailer.transport.replacementfactory"/>
        </service>
      </argument>
      <argument type="collection">
        <argument type="service">
          <service class="Swift_Transport_Esmtp_AuthHandler" public="false">
            <argument type="collection">
              <argument type="service" id="d280b3c5ae5f7b472927f40d52a8bc8c1f4d64b6c195977b776b0d0b6570a951_1"/>
              <argument type="service" id="d280b3c5ae5f7b472927f40d52a8bc8c1f4d64b6c195977b776b0d0b6570a951_2"/>
              <argument type="service" id="d280b3c5ae5f7b472927f40d52a8bc8c1f4d64b6c195977b776b0d0b6570a951_3"/>
            </argument>
            <call method="setUsername">
              <argument>null</argument>
            </call>
            <call method="setPassword">
              <argument>null</argument>
            </call>
            <call method="setAuthMode">
              <argument>null</argument>
            </call>
          </service>
        </argument>
      </argument>
      <argument type="service">
        <service class="Swift_Events_SimpleEventDispatcher" public="false"/>
      </argument>
      <call method="setHost">
        <argument>localhost</argument>
      </call>
      <call method="setPort">
        <argument>25</argument>
      </call>
      <call method="setEncryption">
        <argument>null</argument>
      </call>
      <call method="setTimeout">
        <argument>30</argument>
      </call>
      <call method="setSourceIp">
        <argument>null</argument>
      </call>
      <call method="registerPlugin">
        <argument type="service" id="swiftmailer.mailer.second_mailer.plugin.messagelogger"/>
      </call>
    </service>
    <service id="session.storage" alias="session.storage.filesystem"/>
    <service id="event_dispatcher" alias="debug.event_dispatcher"/>
    <service id="swiftmailer.plugin.messagelogger" alias="swiftmailer.mailer.second_mailer.plugin.messagelogger"/>
    <service id="swiftmailer.mailer" alias="swiftmailer.mailer.second_mailer"/>
    <service id="swiftmailer.transport" alias="swiftmailer.mailer.second_mailer.transport"/>
    <service id="mailer" alias="swiftmailer.mailer.second_mailer"/>
  </services>
</container>
